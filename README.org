# -*- fill-column: 110 -*-

* Stuttgarter TestTage Workshop

The workshop project consists of a small ecosystem of 3 projects - one provider and 2 consumers.
The provider has a Movie resource that it provides via a REST API.

** Movie Provider

The following REST Endpoints are available:

*** Get all movies

Request:

#+BEGIN_SRC http :pretty
  GET http://localhost:8090/movies
#+END_SRC

Response:

#+BEGIN_SRC js
  {
      "movies": [
          {
              "title": "The Dark Knight",
              "description": "Lorem Ipsum ...",
              "releaseYear": 2008,
              "imdbScore": 9,
              "metacriticScore": 0.82,
              "_links": {
                  "self": {
                      "href": "http://localhost:8090/movies/ef824f87-adbb-4f5e-8261-544edeca8ae2"
                  }
              }
          },
          {
              "title": "Batman Begins",
              "description": "Lorem Ipsum ...",
              "releaseYear": 2005,
              "imdbScore": 8.3,
              "metacriticScore": 0.7,
              "_links": {
                  "self": {
                      "href": "http://localhost:8090/movies/8b2ebddb-4ebc-437c-805d-89e035a488eb"
                  }
              }
          }
      "_links": {
          "self": {
              "href": "http://localhost:8090/movies{?score}",
              "templated": true
          }
      }
  }
#+END_SRC

Calling this endpoint will return all available movies.

*** Get all movies by score

#+BEGIN_SRC http :pretty
  GET http://localhost:8090/movies?score=8.5
#+END_SRC

Calling this endpoint will return only the movies with the requested score.

*** Get a single movie by id

Request:

#+BEGIN_SRC http :pretty
  GET http://localhost:8090/movies/6a885503-2b53-44f1-ac4b-c49f59f0ccba
#+END_SRC

Response:

#+BEGIN_SRC js
 {
     "title": "Batman Begins",
     "description": "Lorem Ipsum ...",
     "releaseYear": 2005,
     "imdbScore": 8.3,
     "metacriticScore": 0.7,
     "_links": {
         "self": {
             "href": "http://localhost:8090/movies/6a885503-2b53-44f1-ac4b-c49f59f0ccba"
         }
     }
 }
#+END_SRC

The id can be accessed from the ~self~ links. In case a request with non-existing id is made, the following response will be received:

#+BEGIN_SRC java
  HTTP_STATUS 404(Not Found)
  {
      "status": 404,
      "error": "Not Found",
      "message": "No movie has been found for the requested id."
  }
#+END_SRC

*** Creating a movie (POST operation)

Request:

#+BEGIN_SRC http :pretty
  POST http://localhost:8090/movies
  Content-Type: application/json

  {
    "title": "Contract Testing The Movie",
    "description": "Macht euere Micrto Services nicht kaputt!"
  }
#+END_SRC

Response:

#+BEGIN_SRC java
  HTTP_STATUS 201(Created)
#+END_SRC

** Consumer 1

Consumed Endpoints:
#+BEGIN_SRC http :pretty
  GET http://localhost:8090/movies
  GET http://localhost:8090/movies?score={someNumber}
  GET http://localhost:8090/movies/{id}
#+END_SRC

Consumed Properties:
 - title
 - imdbScore

** Consumer 2

Consumed Endpoints:
#+BEGIN_SRC http :pretty
  GET http://localhost:8090/movies
  GET http://localhost:8090/movies/{id}
#+END_SRC

Consumed Properties:
 - title
 - releaseYear
 - metacriticScore

** Local Setup

*** Clone Repository

#+BEGIN_SRC sh
  git clone https://github.com/nt-ca-aqe/showcase-pact-jvm-consumer-jvm-provider.git
  git checkout -b STT origin/STT
#+END_SRC

*** Build Project

#+BEGIN_SRC sh
  ./gradlew build
#+END_SRC

*** Start Provider Service

#+BEGIN_SRC sh
  ./gradlew bootRun
#+END_SRC

*** Start Consumer 1

#+BEGIN_SRC sh
  ./gradlew bootRun
#+END_SRC

*** Start Consumer 2

#+BEGIN_SRC sh
  ./gradlew bootRun
#+END_SRC
